/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package edu.uchicago;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WeatherSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1738689037367246149L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WeatherSummary\",\"namespace\":\"edu.uchicago\",\"fields\":[{\"name\":\"station\",\"type\":\"int\"},{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"month\",\"type\":\"int\"},{\"name\":\"day\",\"type\":\"int\"},{\"name\":\"meanTemperature\",\"type\":\"double\"},{\"name\":\"meanVisibility\",\"type\":\"double\"},{\"name\":\"meanWindSpeed\",\"type\":\"double\"},{\"name\":\"fog\",\"type\":\"boolean\"},{\"name\":\"rain\",\"type\":\"boolean\"},{\"name\":\"hail\",\"type\":\"boolean\"},{\"name\":\"snow\",\"type\":\"boolean\"},{\"name\":\"thunder\",\"type\":\"boolean\"},{\"name\":\"tornado\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WeatherSummary> ENCODER =
      new BinaryMessageEncoder<WeatherSummary>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WeatherSummary> DECODER =
      new BinaryMessageDecoder<WeatherSummary>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WeatherSummary> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WeatherSummary> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WeatherSummary> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WeatherSummary>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WeatherSummary to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WeatherSummary from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WeatherSummary instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WeatherSummary fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int station;
  @Deprecated public int year;
  @Deprecated public int month;
  @Deprecated public int day;
  @Deprecated public double meanTemperature;
  @Deprecated public double meanVisibility;
  @Deprecated public double meanWindSpeed;
  @Deprecated public boolean fog;
  @Deprecated public boolean rain;
  @Deprecated public boolean hail;
  @Deprecated public boolean snow;
  @Deprecated public boolean thunder;
  @Deprecated public boolean tornado;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WeatherSummary() {}

  /**
   * All-args constructor.
   * @param station The new value for station
   * @param year The new value for year
   * @param month The new value for month
   * @param day The new value for day
   * @param meanTemperature The new value for meanTemperature
   * @param meanVisibility The new value for meanVisibility
   * @param meanWindSpeed The new value for meanWindSpeed
   * @param fog The new value for fog
   * @param rain The new value for rain
   * @param hail The new value for hail
   * @param snow The new value for snow
   * @param thunder The new value for thunder
   * @param tornado The new value for tornado
   */
  public WeatherSummary(java.lang.Integer station, java.lang.Integer year, java.lang.Integer month, java.lang.Integer day, java.lang.Double meanTemperature, java.lang.Double meanVisibility, java.lang.Double meanWindSpeed, java.lang.Boolean fog, java.lang.Boolean rain, java.lang.Boolean hail, java.lang.Boolean snow, java.lang.Boolean thunder, java.lang.Boolean tornado) {
    this.station = station;
    this.year = year;
    this.month = month;
    this.day = day;
    this.meanTemperature = meanTemperature;
    this.meanVisibility = meanVisibility;
    this.meanWindSpeed = meanWindSpeed;
    this.fog = fog;
    this.rain = rain;
    this.hail = hail;
    this.snow = snow;
    this.thunder = thunder;
    this.tornado = tornado;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return station;
    case 1: return year;
    case 2: return month;
    case 3: return day;
    case 4: return meanTemperature;
    case 5: return meanVisibility;
    case 6: return meanWindSpeed;
    case 7: return fog;
    case 8: return rain;
    case 9: return hail;
    case 10: return snow;
    case 11: return thunder;
    case 12: return tornado;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: station = (java.lang.Integer)value$; break;
    case 1: year = (java.lang.Integer)value$; break;
    case 2: month = (java.lang.Integer)value$; break;
    case 3: day = (java.lang.Integer)value$; break;
    case 4: meanTemperature = (java.lang.Double)value$; break;
    case 5: meanVisibility = (java.lang.Double)value$; break;
    case 6: meanWindSpeed = (java.lang.Double)value$; break;
    case 7: fog = (java.lang.Boolean)value$; break;
    case 8: rain = (java.lang.Boolean)value$; break;
    case 9: hail = (java.lang.Boolean)value$; break;
    case 10: snow = (java.lang.Boolean)value$; break;
    case 11: thunder = (java.lang.Boolean)value$; break;
    case 12: tornado = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'station' field.
   * @return The value of the 'station' field.
   */
  public int getStation() {
    return station;
  }


  /**
   * Sets the value of the 'station' field.
   * @param value the value to set.
   */
  public void setStation(int value) {
    this.station = value;
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public int getYear() {
    return year;
  }


  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(int value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'month' field.
   * @return The value of the 'month' field.
   */
  public int getMonth() {
    return month;
  }


  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(int value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'day' field.
   * @return The value of the 'day' field.
   */
  public int getDay() {
    return day;
  }


  /**
   * Sets the value of the 'day' field.
   * @param value the value to set.
   */
  public void setDay(int value) {
    this.day = value;
  }

  /**
   * Gets the value of the 'meanTemperature' field.
   * @return The value of the 'meanTemperature' field.
   */
  public double getMeanTemperature() {
    return meanTemperature;
  }


  /**
   * Sets the value of the 'meanTemperature' field.
   * @param value the value to set.
   */
  public void setMeanTemperature(double value) {
    this.meanTemperature = value;
  }

  /**
   * Gets the value of the 'meanVisibility' field.
   * @return The value of the 'meanVisibility' field.
   */
  public double getMeanVisibility() {
    return meanVisibility;
  }


  /**
   * Sets the value of the 'meanVisibility' field.
   * @param value the value to set.
   */
  public void setMeanVisibility(double value) {
    this.meanVisibility = value;
  }

  /**
   * Gets the value of the 'meanWindSpeed' field.
   * @return The value of the 'meanWindSpeed' field.
   */
  public double getMeanWindSpeed() {
    return meanWindSpeed;
  }


  /**
   * Sets the value of the 'meanWindSpeed' field.
   * @param value the value to set.
   */
  public void setMeanWindSpeed(double value) {
    this.meanWindSpeed = value;
  }

  /**
   * Gets the value of the 'fog' field.
   * @return The value of the 'fog' field.
   */
  public boolean getFog() {
    return fog;
  }


  /**
   * Sets the value of the 'fog' field.
   * @param value the value to set.
   */
  public void setFog(boolean value) {
    this.fog = value;
  }

  /**
   * Gets the value of the 'rain' field.
   * @return The value of the 'rain' field.
   */
  public boolean getRain() {
    return rain;
  }


  /**
   * Sets the value of the 'rain' field.
   * @param value the value to set.
   */
  public void setRain(boolean value) {
    this.rain = value;
  }

  /**
   * Gets the value of the 'hail' field.
   * @return The value of the 'hail' field.
   */
  public boolean getHail() {
    return hail;
  }


  /**
   * Sets the value of the 'hail' field.
   * @param value the value to set.
   */
  public void setHail(boolean value) {
    this.hail = value;
  }

  /**
   * Gets the value of the 'snow' field.
   * @return The value of the 'snow' field.
   */
  public boolean getSnow() {
    return snow;
  }


  /**
   * Sets the value of the 'snow' field.
   * @param value the value to set.
   */
  public void setSnow(boolean value) {
    this.snow = value;
  }

  /**
   * Gets the value of the 'thunder' field.
   * @return The value of the 'thunder' field.
   */
  public boolean getThunder() {
    return thunder;
  }


  /**
   * Sets the value of the 'thunder' field.
   * @param value the value to set.
   */
  public void setThunder(boolean value) {
    this.thunder = value;
  }

  /**
   * Gets the value of the 'tornado' field.
   * @return The value of the 'tornado' field.
   */
  public boolean getTornado() {
    return tornado;
  }


  /**
   * Sets the value of the 'tornado' field.
   * @param value the value to set.
   */
  public void setTornado(boolean value) {
    this.tornado = value;
  }

  /**
   * Creates a new WeatherSummary RecordBuilder.
   * @return A new WeatherSummary RecordBuilder
   */
  public static edu.uchicago.WeatherSummary.Builder newBuilder() {
    return new edu.uchicago.WeatherSummary.Builder();
  }

  /**
   * Creates a new WeatherSummary RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WeatherSummary RecordBuilder
   */
  public static edu.uchicago.WeatherSummary.Builder newBuilder(edu.uchicago.WeatherSummary.Builder other) {
    if (other == null) {
      return new edu.uchicago.WeatherSummary.Builder();
    } else {
      return new edu.uchicago.WeatherSummary.Builder(other);
    }
  }

  /**
   * Creates a new WeatherSummary RecordBuilder by copying an existing WeatherSummary instance.
   * @param other The existing instance to copy.
   * @return A new WeatherSummary RecordBuilder
   */
  public static edu.uchicago.WeatherSummary.Builder newBuilder(edu.uchicago.WeatherSummary other) {
    if (other == null) {
      return new edu.uchicago.WeatherSummary.Builder();
    } else {
      return new edu.uchicago.WeatherSummary.Builder(other);
    }
  }

  /**
   * RecordBuilder for WeatherSummary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WeatherSummary>
    implements org.apache.avro.data.RecordBuilder<WeatherSummary> {

    private int station;
    private int year;
    private int month;
    private int day;
    private double meanTemperature;
    private double meanVisibility;
    private double meanWindSpeed;
    private boolean fog;
    private boolean rain;
    private boolean hail;
    private boolean snow;
    private boolean thunder;
    private boolean tornado;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(edu.uchicago.WeatherSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.station)) {
        this.station = data().deepCopy(fields()[0].schema(), other.station);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.year)) {
        this.year = data().deepCopy(fields()[1].schema(), other.year);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.month)) {
        this.month = data().deepCopy(fields()[2].schema(), other.month);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.day)) {
        this.day = data().deepCopy(fields()[3].schema(), other.day);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.meanTemperature)) {
        this.meanTemperature = data().deepCopy(fields()[4].schema(), other.meanTemperature);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.meanVisibility)) {
        this.meanVisibility = data().deepCopy(fields()[5].schema(), other.meanVisibility);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.meanWindSpeed)) {
        this.meanWindSpeed = data().deepCopy(fields()[6].schema(), other.meanWindSpeed);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.fog)) {
        this.fog = data().deepCopy(fields()[7].schema(), other.fog);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.rain)) {
        this.rain = data().deepCopy(fields()[8].schema(), other.rain);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.hail)) {
        this.hail = data().deepCopy(fields()[9].schema(), other.hail);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.snow)) {
        this.snow = data().deepCopy(fields()[10].schema(), other.snow);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.thunder)) {
        this.thunder = data().deepCopy(fields()[11].schema(), other.thunder);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.tornado)) {
        this.tornado = data().deepCopy(fields()[12].schema(), other.tornado);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing WeatherSummary instance
     * @param other The existing instance to copy.
     */
    private Builder(edu.uchicago.WeatherSummary other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.station)) {
        this.station = data().deepCopy(fields()[0].schema(), other.station);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year)) {
        this.year = data().deepCopy(fields()[1].schema(), other.year);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.month)) {
        this.month = data().deepCopy(fields()[2].schema(), other.month);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.day)) {
        this.day = data().deepCopy(fields()[3].schema(), other.day);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.meanTemperature)) {
        this.meanTemperature = data().deepCopy(fields()[4].schema(), other.meanTemperature);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.meanVisibility)) {
        this.meanVisibility = data().deepCopy(fields()[5].schema(), other.meanVisibility);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.meanWindSpeed)) {
        this.meanWindSpeed = data().deepCopy(fields()[6].schema(), other.meanWindSpeed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.fog)) {
        this.fog = data().deepCopy(fields()[7].schema(), other.fog);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.rain)) {
        this.rain = data().deepCopy(fields()[8].schema(), other.rain);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.hail)) {
        this.hail = data().deepCopy(fields()[9].schema(), other.hail);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.snow)) {
        this.snow = data().deepCopy(fields()[10].schema(), other.snow);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.thunder)) {
        this.thunder = data().deepCopy(fields()[11].schema(), other.thunder);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.tornado)) {
        this.tornado = data().deepCopy(fields()[12].schema(), other.tornado);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'station' field.
      * @return The value.
      */
    public int getStation() {
      return station;
    }


    /**
      * Sets the value of the 'station' field.
      * @param value The value of 'station'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setStation(int value) {
      validate(fields()[0], value);
      this.station = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'station' field has been set.
      * @return True if the 'station' field has been set, false otherwise.
      */
    public boolean hasStation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'station' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearStation() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public int getYear() {
      return year;
    }


    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setYear(int value) {
      validate(fields()[1], value);
      this.year = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearYear() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'month' field.
      * @return The value.
      */
    public int getMonth() {
      return month;
    }


    /**
      * Sets the value of the 'month' field.
      * @param value The value of 'month'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setMonth(int value) {
      validate(fields()[2], value);
      this.month = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'month' field has been set.
      * @return True if the 'month' field has been set, false otherwise.
      */
    public boolean hasMonth() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'month' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearMonth() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'day' field.
      * @return The value.
      */
    public int getDay() {
      return day;
    }


    /**
      * Sets the value of the 'day' field.
      * @param value The value of 'day'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setDay(int value) {
      validate(fields()[3], value);
      this.day = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'day' field has been set.
      * @return True if the 'day' field has been set, false otherwise.
      */
    public boolean hasDay() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'day' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearDay() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'meanTemperature' field.
      * @return The value.
      */
    public double getMeanTemperature() {
      return meanTemperature;
    }


    /**
      * Sets the value of the 'meanTemperature' field.
      * @param value The value of 'meanTemperature'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setMeanTemperature(double value) {
      validate(fields()[4], value);
      this.meanTemperature = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'meanTemperature' field has been set.
      * @return True if the 'meanTemperature' field has been set, false otherwise.
      */
    public boolean hasMeanTemperature() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'meanTemperature' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearMeanTemperature() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'meanVisibility' field.
      * @return The value.
      */
    public double getMeanVisibility() {
      return meanVisibility;
    }


    /**
      * Sets the value of the 'meanVisibility' field.
      * @param value The value of 'meanVisibility'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setMeanVisibility(double value) {
      validate(fields()[5], value);
      this.meanVisibility = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'meanVisibility' field has been set.
      * @return True if the 'meanVisibility' field has been set, false otherwise.
      */
    public boolean hasMeanVisibility() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'meanVisibility' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearMeanVisibility() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'meanWindSpeed' field.
      * @return The value.
      */
    public double getMeanWindSpeed() {
      return meanWindSpeed;
    }


    /**
      * Sets the value of the 'meanWindSpeed' field.
      * @param value The value of 'meanWindSpeed'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setMeanWindSpeed(double value) {
      validate(fields()[6], value);
      this.meanWindSpeed = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'meanWindSpeed' field has been set.
      * @return True if the 'meanWindSpeed' field has been set, false otherwise.
      */
    public boolean hasMeanWindSpeed() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'meanWindSpeed' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearMeanWindSpeed() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'fog' field.
      * @return The value.
      */
    public boolean getFog() {
      return fog;
    }


    /**
      * Sets the value of the 'fog' field.
      * @param value The value of 'fog'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setFog(boolean value) {
      validate(fields()[7], value);
      this.fog = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'fog' field has been set.
      * @return True if the 'fog' field has been set, false otherwise.
      */
    public boolean hasFog() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'fog' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearFog() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'rain' field.
      * @return The value.
      */
    public boolean getRain() {
      return rain;
    }


    /**
      * Sets the value of the 'rain' field.
      * @param value The value of 'rain'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setRain(boolean value) {
      validate(fields()[8], value);
      this.rain = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'rain' field has been set.
      * @return True if the 'rain' field has been set, false otherwise.
      */
    public boolean hasRain() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'rain' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearRain() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'hail' field.
      * @return The value.
      */
    public boolean getHail() {
      return hail;
    }


    /**
      * Sets the value of the 'hail' field.
      * @param value The value of 'hail'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setHail(boolean value) {
      validate(fields()[9], value);
      this.hail = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'hail' field has been set.
      * @return True if the 'hail' field has been set, false otherwise.
      */
    public boolean hasHail() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'hail' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearHail() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'snow' field.
      * @return The value.
      */
    public boolean getSnow() {
      return snow;
    }


    /**
      * Sets the value of the 'snow' field.
      * @param value The value of 'snow'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setSnow(boolean value) {
      validate(fields()[10], value);
      this.snow = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'snow' field has been set.
      * @return True if the 'snow' field has been set, false otherwise.
      */
    public boolean hasSnow() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'snow' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearSnow() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'thunder' field.
      * @return The value.
      */
    public boolean getThunder() {
      return thunder;
    }


    /**
      * Sets the value of the 'thunder' field.
      * @param value The value of 'thunder'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setThunder(boolean value) {
      validate(fields()[11], value);
      this.thunder = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'thunder' field has been set.
      * @return True if the 'thunder' field has been set, false otherwise.
      */
    public boolean hasThunder() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'thunder' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearThunder() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'tornado' field.
      * @return The value.
      */
    public boolean getTornado() {
      return tornado;
    }


    /**
      * Sets the value of the 'tornado' field.
      * @param value The value of 'tornado'.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder setTornado(boolean value) {
      validate(fields()[12], value);
      this.tornado = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'tornado' field has been set.
      * @return True if the 'tornado' field has been set, false otherwise.
      */
    public boolean hasTornado() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'tornado' field.
      * @return This builder.
      */
    public edu.uchicago.WeatherSummary.Builder clearTornado() {
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WeatherSummary build() {
      try {
        WeatherSummary record = new WeatherSummary();
        record.station = fieldSetFlags()[0] ? this.station : (java.lang.Integer) defaultValue(fields()[0]);
        record.year = fieldSetFlags()[1] ? this.year : (java.lang.Integer) defaultValue(fields()[1]);
        record.month = fieldSetFlags()[2] ? this.month : (java.lang.Integer) defaultValue(fields()[2]);
        record.day = fieldSetFlags()[3] ? this.day : (java.lang.Integer) defaultValue(fields()[3]);
        record.meanTemperature = fieldSetFlags()[4] ? this.meanTemperature : (java.lang.Double) defaultValue(fields()[4]);
        record.meanVisibility = fieldSetFlags()[5] ? this.meanVisibility : (java.lang.Double) defaultValue(fields()[5]);
        record.meanWindSpeed = fieldSetFlags()[6] ? this.meanWindSpeed : (java.lang.Double) defaultValue(fields()[6]);
        record.fog = fieldSetFlags()[7] ? this.fog : (java.lang.Boolean) defaultValue(fields()[7]);
        record.rain = fieldSetFlags()[8] ? this.rain : (java.lang.Boolean) defaultValue(fields()[8]);
        record.hail = fieldSetFlags()[9] ? this.hail : (java.lang.Boolean) defaultValue(fields()[9]);
        record.snow = fieldSetFlags()[10] ? this.snow : (java.lang.Boolean) defaultValue(fields()[10]);
        record.thunder = fieldSetFlags()[11] ? this.thunder : (java.lang.Boolean) defaultValue(fields()[11]);
        record.tornado = fieldSetFlags()[12] ? this.tornado : (java.lang.Boolean) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WeatherSummary>
    WRITER$ = (org.apache.avro.io.DatumWriter<WeatherSummary>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WeatherSummary>
    READER$ = (org.apache.avro.io.DatumReader<WeatherSummary>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.station);

    out.writeInt(this.year);

    out.writeInt(this.month);

    out.writeInt(this.day);

    out.writeDouble(this.meanTemperature);

    out.writeDouble(this.meanVisibility);

    out.writeDouble(this.meanWindSpeed);

    out.writeBoolean(this.fog);

    out.writeBoolean(this.rain);

    out.writeBoolean(this.hail);

    out.writeBoolean(this.snow);

    out.writeBoolean(this.thunder);

    out.writeBoolean(this.tornado);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.station = in.readInt();

      this.year = in.readInt();

      this.month = in.readInt();

      this.day = in.readInt();

      this.meanTemperature = in.readDouble();

      this.meanVisibility = in.readDouble();

      this.meanWindSpeed = in.readDouble();

      this.fog = in.readBoolean();

      this.rain = in.readBoolean();

      this.hail = in.readBoolean();

      this.snow = in.readBoolean();

      this.thunder = in.readBoolean();

      this.tornado = in.readBoolean();

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.station = in.readInt();
          break;

        case 1:
          this.year = in.readInt();
          break;

        case 2:
          this.month = in.readInt();
          break;

        case 3:
          this.day = in.readInt();
          break;

        case 4:
          this.meanTemperature = in.readDouble();
          break;

        case 5:
          this.meanVisibility = in.readDouble();
          break;

        case 6:
          this.meanWindSpeed = in.readDouble();
          break;

        case 7:
          this.fog = in.readBoolean();
          break;

        case 8:
          this.rain = in.readBoolean();
          break;

        case 9:
          this.hail = in.readBoolean();
          break;

        case 10:
          this.snow = in.readBoolean();
          break;

        case 11:
          this.thunder = in.readBoolean();
          break;

        case 12:
          this.tornado = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










